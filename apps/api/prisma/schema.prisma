// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  username        String?    @unique
  password_hash   String
  first_name      String
  last_name       String
  status          String     @default("ACTIVE")
  email_verified  Boolean    @default(false)
  two_factor_enabled Boolean  @default(false)
  two_factor_secret String?
  backup_codes     String[] // JSON array of backup codes
  last_login_at   DateTime?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  // Relationships
  user_roles         User_Role[]
  refreshTokens      RefreshToken[]
  passwordResets     PasswordReset[]
  tokenBlacklists   TokenBlacklist[]

  @@map("users")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user_roles         User_Role[]
  rolePermissions    RolePermission[]

  @@map("roles")
}

model User_Role {
  id        String   @id @default(uuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String       @id @default(uuid())
  name        String       @unique
  resource    String
  action      String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  role_id      String
  permission_id String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt

  role         Role       @relation(fields: [role_id], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permission_id], references: [id], onDelete: Cascade)

  @@unique([role_id, permission_id])
  @@map("role_permissions")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  reason    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token_blacklists")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}