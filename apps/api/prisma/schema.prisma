// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(uuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String
  lastName          String
  isActive          Boolean  @default(true)
  isVerified        Boolean  @default(false)
  twoFactorEnabled  Boolean  @default(false)
  twoFactorSecret   String?
  backupCodes       String[] // JSON array of backup codes
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  roleId String
  role   Role   @relation(fields: [roleId], references: [id])

  refreshTokens    RefreshToken[]
  passwordResets   PasswordReset[]
  tokenBlacklists  TokenBlacklist[]

  @@map("users")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  users       User[]
  rolePermissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String       @id @default(uuid())
  name        String       @unique
  resource    String
  action      String
  description String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  rolePermissions RolePermission[]

  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(uuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())

  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  reason    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("token_blacklists")
}

model PasswordReset {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}